type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class RPSTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = ["Tim\nrock,gun,lightning,devil,dragon,water,air,paper,sponge,wolf,tree,human,snake,scissors,fire\nrock\npaper\npaper\n!rating\n!exit",
                     "Tim\nrock,paper,scissors\nrock\n!exit",
                     "Tim\nrock,gun,lightning,devil,dragon,water,air,paper,sponge,wolf,tree,human,snake,scissors,fire\nrock\nrock\nrock\nrock\n!exit",
                     "Tim\n\nrock\nrock\nrock\navada_kedavra\nrock\n!exit",
                     "Tim\n1,2,3,4,5\n1\n1\n2\n3\n4\n5\n!exit"]
            return [TestCase(stdin=case, attach=case, files={'rating.txt': 'Tim 1350\nJane 200\nAlex 400'})
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:

            if "Okay" not in reply:
                return CheckResult.wrong(
                    "There is no \"Okay, let's start\" message in this test"
                )

            reply = [r for r in reply.split("\n") if len(r) != 0]
            attach = attach.split("\n")

            if len(reply) == 0:
                return CheckResult.wrong(
                    "Looks like you didn't output anything!"
                )



            rating = 1350
            self.options = (attach[1] or "rock,paper,scissors").split(",")
            for rep in range(len(reply)):
                reply_part = reply[rep]
                try:
                    attach_part = attach[rep]
                    if attach_part == "!exit" or \
                            "Hello" in reply_part or \
                            "Okay" in reply_part or "Bye!" in reply_part:
                        continue
                    if attach_part == "!rating":
                        if reply_part.split(":")[-1].strip() != str(rating):
                            return CheckResult.wrong("User rating is wrong :(")
                        continue
                    elif "Sorry" in reply_part:
                        result = -1
                        option = reply_part.split()[-1]
                    elif "draw" in reply_part:
                        result = 0
                        if '(' not in reply_part or ')' not in reply_part:
                            return CheckResult.wrong(
                                "There are no '(' or ')' character when there is a draw"
                            )
                        start = reply_part.index('(')
                        end = reply_part.index(')')
                        option = reply_part[start + 1: end]
                        rating += 50
                    elif "Well" in reply_part:
                        result = 1
                        option = reply_part.split()[-3]
                        rating += 100
                    elif "Invalid input" in reply_part:
                        result = 2
                        if attach_part in self.options:
                            return CheckResult.wrong(
                                'Looks like you output "Invalid input" '
                                'in the wrong place'
                            )
                    else:
                        raise IndexError

                    if attach_part not in self.options:
                        if result == 2:
                            res = True
                        else:
                            return CheckResult.wrong(
                                "Looks like you didn't handle an invalid input correctly"
                            )
                    else:
                        res = self.solve(result, attach_part.strip(), option.strip())

                    if res is False:
                        return CheckResult.wrong(
                            "You chose " + attach_part + ", "
                            "computer chose " + option + '. '
                            'And the answer was \"' + reply_part + '\". '
                            'That\'s wrong reply'
                        )

                    if res < 0:
                        raise IndexError
                except IndexError:
                    return CheckResult.wrong("Seems like your answer (\"{}\") does not fit in given templates".format(reply_part))
            return CheckResult.correct()

        def solve(self, result, *options):
            if any(opt not in self.options for opt in options):
                return -1
            diff = self.options.index(options[0]) - self.options.index(options[1])
            if not diff:
                true_result = 0
            else:
                true_result = (-1) ** ((abs(diff) - (len(self.options) // 2) > 0) == (diff > 0))
            return true_result == result

    if __name__ == '__main__':
        RPSTest("rps.game").run_tests()
  learner_created: false
- name: rps/rating.txt
  visible: true
  text: |-
    Tim 350
    Jane 200
    Alex 400
  learner_created: true
- name: rps/game.py
  visible: true
  text: |
    # Write your code here
    import random

    options = ['rock', 'scissors', 'paper']
    bits = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}

    rating_file = open('rating.txt')
    rating_mas = rating_file.read().split()
    people_rating = {}
    for i in range(0, len(rating_mas), 2):
        people_rating[rating_mas[i]] = rating_mas[i+1]

    name = input('Enter your name:')
    print('Hello,', name)
    if name in people_rating:
        rating = people_rating[name]
    else:
        rating = 0

    while True:
        player_choice = input()
        robot_choice = random.choice(options)
        if player_choice == '!exit':
            print('Bye!')
            break
        elif player_choice == '!rating':
            print('Your rating:', rating)
        elif player_choice not in options:
            print('Invalid input')
        elif player_choice == robot_choice:
            print('There is a draw ({})'.format(robot_choice))
            rating += 50
        elif bits[player_choice] == robot_choice:
            print('Well done. Computer chose', robot_choice, 'and failed')
            rating += 100
        elif bits[robot_choice] == player_choice:
            print('Sorry, but computer chose', robot_choice)
  learner_created: true
feedback_link: https://hyperskill.org/projects/78/stages/435/implement
status: Solved
record: -1
